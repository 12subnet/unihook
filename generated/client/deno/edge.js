const exports = {};
Object.defineProperty(exports, '__esModule', { value: true });

import {
    Debug,
    Decimal,
    decompressFromBase64,
    empty,
    Extensions,
    getPrismaClient,
    join,
    makeStrictEnum,
    NotFoundError,
    objectEnumValues,
    PrismaClientInitializationError,
    PrismaClientKnownRequestError,
    PrismaClientRustPanicError,
    PrismaClientUnknownRequestError,
    PrismaClientValidationError,
    raw,
    sqltag,
} from '.././runtime/edge-esm.js';

const Prisma = {};

exports.Prisma = Prisma;

/**
 * Prisma Client JS version: 4.8.0
 * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
 */
Prisma.prismaVersion = {
    client: '4.8.0',
    engine: 'd6e67a83f971b175a593ccc12e15c4a757f93ffe',
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.NotFoundError = NotFoundError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = () => (val) => val;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
    DbNull: objectEnumValues.classes.DbNull,
    JsonNull: objectEnumValues.classes.JsonNull,
    AnyNull: objectEnumValues.classes.AnyNull,
};

const dirname = '/';

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) {
    return x;
}

exports.Prisma.PatternScalarFieldEnum = makeEnum({
    id: 'id',
    pattern: 'pattern',
    userId: 'userId',
});

exports.Prisma.QueryMode = makeEnum({
    default: 'default',
    insensitive: 'insensitive',
});

exports.Prisma.SortOrder = makeEnum({
    asc: 'asc',
    desc: 'desc',
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
    id: 'id',
});

exports.Prisma.ModelName = makeEnum({
    Pattern: 'Pattern',
    User: 'User',
});

const compressedDMMF =
    '=';
const decompressedDMMF = decompressFromBase64(compressedDMMF);
// We are parsing 2 times, as we want independent objects, because
// DMMFClass introduces circular references in the dmmf object
const dmmf = JSON.parse(decompressedDMMF);
exports.Prisma.dmmf = JSON.parse(decompressedDMMF);

/**
 * Create the Client
 */
const config = {
    'generator': {
        'name': 'client',
        'provider': {
            'fromEnvVar': null,
            'value': 'prisma-client-js',
        },
        'output': {
            'value': '/workspaces/unihook/generated/client',
            'fromEnvVar': null,
        },
        'config': {
            'engineType': 'library',
        },
        'binaryTargets': [],
        'previewFeatures': [
            'deno',
        ],
        'isCustomOutput': true,
    },
    'relativeEnvPaths': {
        'rootEnvPath': '../../.env',
        'schemaEnvPath': '../../.env',
    },
    'relativePath': '../../prisma',
    'clientVersion': '4.8.0',
    'engineVersion': 'd6e67a83f971b175a593ccc12e15c4a757f93ffe',
    'datasourceNames': [
        'db',
    ],
    'activeProvider': 'mongodb',
    'dataProxy': true,
};
config.document = dmmf;
config.dirname = dirname;

config.inlineSchema =
    'Z2VuZXJhdG9yIGNsaWVudCB7CiAgcHJvdmlkZXIgICAgICAgID0gInByaXNtYS1jbGllbnQtanMiCiAgcHJldmlld0ZlYXR1cmVzID0gWyJkZW5vIl0KICBvdXRwdXQgICAgICAgICAgPSAiLi4vZ2VuZXJhdGVkL2NsaWVudCIKfQoKZGF0YXNvdXJjZSBkYiB7CiAgcHJvdmlkZXIgPSAibW9uZ29kYiIKICB1cmwgICAgICA9IGVudigiREFUQUJBU0VfVVJMIikKfQoKbW9kZWwgUGF0dGVybiB7CiAgaWQgICAgICBTdHJpbmcgQGlkIEBtYXAoIl9pZCIpCiAgcGF0dGVybiBTdHJpbmcKICBVc2VyICAgIFVzZXI/ICBAcmVsYXRpb24oZmllbGRzOiBbdXNlcklkXSwgcmVmZXJlbmNlczogW2lkXSkKICB1c2VySWQgIEludD8KfQoKbW9kZWwgVXNlciB7CiAgaWQgICAgICAgSW50ICAgICAgIEBpZCBAbWFwKCJfaWQiKQogIHBhdHRlcm5zIFBhdHRlcm5bXQp9';
config.inlineSchemaHash =
    'bc17b09d536871a4057cc27dee3439ce4a198c34044a9cd32825340258fa9ac4';

config.inlineDatasources = {
    'db': {
        'url': {
            'fromEnvVar': 'DATABASE_URL',
            'value': null,
        },
    },
};

config.injectableEdgeEnv = {
    parsed: {
        DATABASE_URL:
            typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] ||
            typeof process !== 'undefined' && process.env &&
                process.env.DATABASE_URL ||
            undefined,
    },
};

if (
    typeof globalThis !== 'undefined' && globalThis['DEBUG'] ||
    typeof process !== 'undefined' && process.env && process.env.DEBUG ||
    undefined
) {
    Debug.enable(
        typeof globalThis !== 'undefined' && globalThis['DEBUG'] ||
            typeof process !== 'undefined' && process.env &&
                process.env.DEBUG ||
            undefined,
    );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
export { exports as default, Prisma, PrismaClient };
